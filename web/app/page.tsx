'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { apiClient } from '@/lib/api';
import { User, Subscription } from '@/types';
import { formatCurrency, getDaysUntilBilling, getBillingStatus, calculateTotalMonthlySpend } from '@/lib/utils';
import Header from '@/components/Header';
import SubscriptionCard from '@/components/SubscriptionCard';
import AddSubscriptionButton from '@/components/AddSubscriptionButton';
import StatsCard from '@/components/StatsCard';
import UpcomingBills from '@/components/UpcomingBills';

export default function HomePage() {
  const router = useRouter();
  const [user, setUser] = useState<User | null>(null);
  const [subscriptions, setSubscriptions] = useState<Subscription[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [logs, setLogs] = useState<string[]>([]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const addLog = (message: string) => {
    console.log(message);
    const existingLogs = JSON.parse(localStorage.getItem('debug_logs') || '[]');
    existingLogs.push(message);
    localStorage.setItem('debug_logs', JSON.stringify(existingLogs));
    setLogs(prev => [...prev, message]);
  };

  useEffect(() => {
    addLog('üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    addLog(`üìç –¢–µ–∫—É—â–∏–π URL: ${window.location.href}`);
    
    const token = localStorage.getItem('access_token');
    addLog(`üîë –¢–æ–∫–µ–Ω –≤ localStorage: ${token ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
    addLog(`üîë –¢–∏–ø —Ç–æ–∫–µ–Ω–∞: ${typeof token}`);
    addLog(`üîë –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: ${token}`);
    if (token) {
      addLog(`üîë –¢–æ–∫–µ–Ω (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤): ${token.substring(0, 20)}...`);
    }
    
    if (!token) {
      addLog('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω');
      router.push('/login');
      return;
    }

    addLog('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
    loadData();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏
    const existingLogs = JSON.parse(localStorage.getItem('debug_logs') || '[]');
    setLogs(existingLogs);
  }, [router]);

  const loadData = async () => {
    try {
      addLog('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      addLog(`üîë –¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º: ${localStorage.getItem('access_token')?.substring(0, 20)}...`);
      setLoading(true);
      
      addLog('üöÄ –í—ã–∑—ã–≤–∞–µ–º apiClient.getCurrentUser()...');
      const userData = await apiClient.getCurrentUser();
      addLog('‚úÖ getCurrentUser() —É—Å–ø–µ—à–µ–Ω');
      
      addLog('üöÄ –í—ã–∑—ã–≤–∞–µ–º apiClient.getSubscriptions()...');
      const subscriptionsData = await apiClient.getSubscriptions();
      addLog('‚úÖ getSubscriptions() —É—Å–ø–µ—à–µ–Ω');
      
      addLog('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      setUser(userData);
      setSubscriptions(subscriptionsData);
    } catch (err: any) {
      const errorLog = `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${JSON.stringify({
        status: err.response?.status,
        data: err.response?.data,
        message: err.message
      })}`;
      addLog(errorLog);
      console.error('Error loading data:', err);
      let errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö';
      
      if (err.response?.data?.detail) {
        if (typeof err.response.data.detail === 'string') {
          errorMessage = err.response.data.detail;
        } else if (Array.isArray(err.response.data.detail)) {
          errorMessage = err.response.data.detail.map((item: any) => item.msg || item).join(', ');
        } else {
          errorMessage = JSON.stringify(err.response.data.detail);
        }
      } else if (err.message) {
        errorMessage = err.message;
      }
      
      setError(errorMessage);
      localStorage.removeItem('access_token');
      router.push('/login');
    } finally {
      setLoading(false);
    }
  };

  const handleSubscriptionUpdate = (updatedSubscription: Subscription) => {
    setSubscriptions(prev => 
      prev.map(sub => sub.id === updatedSubscription.id ? updatedSubscription : sub)
    );
  };

  const handleSubscriptionDelete = (subscriptionId: number) => {
    setSubscriptions(prev => prev.filter(sub => sub.id !== subscriptionId));
  };

  const handleSubscriptionAdd = (newSubscription: Subscription) => {
    setSubscriptions(prev => [...prev, newSubscription]);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">–û—à–∏–±–∫–∞</h1>
          <p className="text-gray-600 mb-4">{error}</p>
          <button 
            onClick={() => router.push('/login')}
            className="btn-primary"
          >
            –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
          </button>
        </div>
      </div>
    );
  }

  const totalMonthlySpend = calculateTotalMonthlySpend(subscriptions);
  const activeSubscriptions = subscriptions.filter(sub => sub.is_active).length;

  return (
    <div className="min-h-screen bg-gray-50">
      <Header user={user} />
      
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Welcome Section */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user?.first_name || user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
          </h1>
          <p className="text-gray-600">
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã
          </p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <StatsCard
            title="–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"
            value={activeSubscriptions.toString()}
            icon="üì±"
            color="blue"
          />
          <StatsCard
            title="–¢—Ä–∞—Ç—ã –≤ –º–µ—Å—è—Ü"
            value={formatCurrency(totalMonthlySpend, 'RUB')}
            icon="üí∞"
            color="green"
          />
          <StatsCard
            title="–°—Ä–µ–¥–Ω—è—è –ø–æ–¥–ø–∏—Å–∫–∞"
            value={activeSubscriptions > 0 ? formatCurrency(totalMonthlySpend / activeSubscriptions, 'RUB') : '0 ‚ÇΩ'}
            icon="üìä"
            color="purple"
          />
        </div>

        {/* Upcoming Bills */}
        <UpcomingBills subscriptions={subscriptions} />

        {/* Subscriptions Section */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-bold text-gray-900">–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏</h2>
            <AddSubscriptionButton onSubscriptionAdd={handleSubscriptionAdd} />
          </div>

          {subscriptions.length === 0 ? (
            <div className="card text-center py-12">
              <div className="text-6xl mb-4">üì±</div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫
              </h3>
              <p className="text-gray-600 mb-6">
                –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã
              </p>
              <AddSubscriptionButton onSubscriptionAdd={handleSubscriptionAdd} />
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {subscriptions.map((subscription) => (
                <SubscriptionCard
                  key={subscription.id}
                  subscription={subscription}
                  onUpdate={handleSubscriptionUpdate}
                  onDelete={handleSubscriptionDelete}
                />
              ))}
            </div>
          )}
        </div>
      </main>
      
      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ */}
      {logs.length > 0 && (
        <div className="mt-8 max-w-6xl mx-auto px-4">
          <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm">
            <div className="flex justify-between items-center mb-2">
              <h3 className="text-white font-bold">üìã –õ–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏ ({logs.length})</h3>
              <button
                onClick={() => {
                  localStorage.removeItem('debug_logs');
                  setLogs([]);
                }}
                className="text-red-400 hover:text-red-300 text-xs"
              >
                –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
              </button>
            </div>
            <div className="max-h-60 overflow-y-auto">
              {logs.map((log, index) => (
                <div key={index} className="mb-1 text-xs">
                  {log}
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
